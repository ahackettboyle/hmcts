---

- name: generate ansible master
  ec2:
    id: "anna" #Â insure idenpotency
    key_name: "{{ aws_key}}"
    instance_type: "{{ instance_type }}"
    image: "{{ image }}"
    vpc_subnet_id: "{{ public_subnet}}"
    group_id: "{{ master_security_group }}"
    assign_public_ip: yes
    zone: "{{ zone }}"
    wait: yes
    instance_tags:
      Name: "{{ prefix }}_ansiblemaster"
  tags:
    - master
  register: master


- name: wait for ip address to come up
  wait_for:
    host: "{{ item }}"
    port: 22
    timeout: 600
    state: started
  with_items:
    - "{{ master.instances[0].public_ip }}"
  tags:
    - master

- name: copy inventory file with new ip address
  template:
    src: templates/inventory.j2
    dest: "{{ repo_location }}/ansible/master/inventory"
    # vars:
    #   instances: "{{ master.instances }}"
  with_items: "{{ master.instances[0].public_ip }}"
  tags:
    - master
#
# - name: generate webservers
#   ec2:
#     key_name: "{{ aws_key}}"
#     instance_type: "{{ instance_type }}"
#     image: "{{ image }}"
#     vpc_subnet_id: "{{ private_subnet}}"
#     group_id: "{{ webserver_security_group }}"
#     assign_public_ip: no
#     zone: "{{ zone }}"
#     count: 2
#     instance_tags:
#       Name: "{{ prefix }}_webserver"
#   tags:
#     - webserver
#   register: webserver
#
#
#
# - name: generate loadbalancer
#   ec2:
#     key_name: "{{ aws_key }}"
#     instance_type: "{{ instance_type }}"
#     image: "{{ image }}"
#     vpc_subnet_id: "{{ public_subnet }}"
#     group_id: "{{ loadbalancer_security_group }}"
#     assign_public_ip: yes
#     zone: "{{ zone }}"
#     instance_tags:
#       Name: "{{ prefix }}_loadbalancer"
#   tags:
#     - loadbalancer
#   register: loadbalancer
#
#   - name: wait for ip address to come up
#     wait_for:
#       host: "{{ master.instances[0].public_ip }}"
#       port: 22
#       timeout: 600
#       state: started
#
# - name: store ip address in vars file
#   template:
#     src: templates/loadbalancer.yml
#     dest:
# #
# # - name: generate database
# #   ec2:
# #     key_name: "{{ aws_key }}"
# #     instance_type: "{{ instance_type }}"
# #     image: "{{ image }}"
# #     vpc_subnet_id: "{{ private_subnet }}"
# #     group_id: "{{ database_security_group }}"
# #     assign_public_ip: no
# #     zone: "{{ zone }}"
# #     instance_tags:
# #       Name: "{{ prefix }}_database"
# #   tags:
# #     - database
# #   register: database
#
#
# - name: copy inventory file with new ip address
#   template:
#     src: templates/inventory.j2
#     dest: "{{ inventory_location }}/inventory"
#     # vars:
#     #   instances: "{{ master.instances }}"
#   with_items: "{{ master.instances[0].public_ip }}"


# - name: overwrite bash script with correct variables
#   template:
#     src: templates/ec2.sh
#     dest: "{{inventory_location}}/ec2.sh"
#   with_items:
#     - "{{ prefix }}_master"
#   tags:
#     - master
#   when: master.changed
#
#
# - name: add master ip to file
#   shell: "{{inventory_location}}/ec2.sh"
#   args:
#     executable: /bin/bash
#   tags:
#     - master
#   when: master.changed
#
# - name: remove ec2 script to avoid confusion
#   file:
#     path: "{{ inventory_location}}/ec2.sh"
#     state: absent
#   when: master.changed
#   tags:
#     - master
